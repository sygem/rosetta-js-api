/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlockEvent from './BlockEvent';

/**
 * The EventsBlocksResponse model module.
 * @module model/EventsBlocksResponse
 * @version 1.4.10
 */
class EventsBlocksResponse {
    /**
     * Constructs a new <code>EventsBlocksResponse</code>.
     * EventsBlocksResponse contains an ordered collection of BlockEvents and the max retrievable sequence.
     * @alias module:model/EventsBlocksResponse
     * @param maxSequence {Number} max_sequence is the maximum available sequence number to fetch.
     * @param events {Array.<module:model/BlockEvent>} events is an array of BlockEvents indicating the order to add and remove blocks to maintain a canonical view of blockchain state. Lightweight clients can use this event stream to update state without implementing their own block syncing logic.
     */
    constructor(maxSequence, events) { 
        
        EventsBlocksResponse.initialize(this, maxSequence, events);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, maxSequence, events) { 
        obj['max_sequence'] = maxSequence;
        obj['events'] = events;
    }

    /**
     * Constructs a <code>EventsBlocksResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsBlocksResponse} obj Optional instance to populate.
     * @return {module:model/EventsBlocksResponse} The populated <code>EventsBlocksResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsBlocksResponse();

            if (data.hasOwnProperty('max_sequence')) {
                obj['max_sequence'] = ApiClient.convertToType(data['max_sequence'], 'Number');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [BlockEvent]);
            }
        }
        return obj;
    }


}

/**
 * max_sequence is the maximum available sequence number to fetch.
 * @member {Number} max_sequence
 */
EventsBlocksResponse.prototype['max_sequence'] = undefined;

/**
 * events is an array of BlockEvents indicating the order to add and remove blocks to maintain a canonical view of blockchain state. Lightweight clients can use this event stream to update state without implementing their own block syncing logic.
 * @member {Array.<module:model/BlockEvent>} events
 */
EventsBlocksResponse.prototype['events'] = undefined;






export default EventsBlocksResponse;

