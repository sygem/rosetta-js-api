/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountIdentifier from './AccountIdentifier';
import SignatureType from './SignatureType';

/**
 * The SigningPayload model module.
 * @module model/SigningPayload
 * @version 1.4.10
 */
class SigningPayload {
    /**
     * Constructs a new <code>SigningPayload</code>.
     * SigningPayload is signed by the client with the keypair associated with an AccountIdentifier using the specified SignatureType. SignatureType can be optionally populated if there is a restriction on the signature scheme that can be used to sign the payload.
     * @alias module:model/SigningPayload
     * @param hexBytes {String} 
     */
    constructor(hexBytes) { 
        
        SigningPayload.initialize(this, hexBytes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hexBytes) { 
        obj['hex_bytes'] = hexBytes;
    }

    /**
     * Constructs a <code>SigningPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SigningPayload} obj Optional instance to populate.
     * @return {module:model/SigningPayload} The populated <code>SigningPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SigningPayload();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('account_identifier')) {
                obj['account_identifier'] = AccountIdentifier.constructFromObject(data['account_identifier']);
            }
            if (data.hasOwnProperty('hex_bytes')) {
                obj['hex_bytes'] = ApiClient.convertToType(data['hex_bytes'], 'String');
            }
            if (data.hasOwnProperty('signature_type')) {
                obj['signature_type'] = SignatureType.constructFromObject(data['signature_type']);
            }
        }
        return obj;
    }


}

/**
 * [DEPRECATED by `account_identifier` in `v1.4.4`] The network-specific address of the account that should sign the payload.
 * @member {String} address
 */
SigningPayload.prototype['address'] = undefined;

/**
 * @member {module:model/AccountIdentifier} account_identifier
 */
SigningPayload.prototype['account_identifier'] = undefined;

/**
 * @member {String} hex_bytes
 */
SigningPayload.prototype['hex_bytes'] = undefined;

/**
 * @member {module:model/SignatureType} signature_type
 */
SigningPayload.prototype['signature_type'] = undefined;






export default SigningPayload;

