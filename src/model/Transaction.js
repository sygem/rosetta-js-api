/**
 * Rosetta
 * Build Once. Integrate Your Blockchain Everywhere.
 *
 * The version of the OpenAPI document: 1.4.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Operation from './Operation';
import RelatedTransaction from './RelatedTransaction';
import TransactionIdentifier from './TransactionIdentifier';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 1.4.10
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * Transactions contain an array of Operations that are attributable to the same TransactionIdentifier.
     * @alias module:model/Transaction
     * @param transactionIdentifier {module:model/TransactionIdentifier} 
     * @param operations {Array.<module:model/Operation>} 
     */
    constructor(transactionIdentifier, operations) { 
        
        Transaction.initialize(this, transactionIdentifier, operations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, transactionIdentifier, operations) { 
        obj['transaction_identifier'] = transactionIdentifier;
        obj['operations'] = operations;
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('transaction_identifier')) {
                obj['transaction_identifier'] = TransactionIdentifier.constructFromObject(data['transaction_identifier']);
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], [Operation]);
            }
            if (data.hasOwnProperty('related_transactions')) {
                obj['related_transactions'] = ApiClient.convertToType(data['related_transactions'], [RelatedTransaction]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/TransactionIdentifier} transaction_identifier
 */
Transaction.prototype['transaction_identifier'] = undefined;

/**
 * @member {Array.<module:model/Operation>} operations
 */
Transaction.prototype['operations'] = undefined;

/**
 * @member {Array.<module:model/RelatedTransaction>} related_transactions
 */
Transaction.prototype['related_transactions'] = undefined;

/**
 * Transactions that are related to other transactions (like a cross-shard transaction) should include the tranaction_identifier of these transactions in the metadata.
 * @member {Object} metadata
 */
Transaction.prototype['metadata'] = undefined;






export default Transaction;

